
  자바하기 위해서 무엇이 필요하죠??
    : JDK 설치 - 11version
    : path설정 - 컴파일, 실행할때 필요한 exe 파일을 어디서든 사용할수 있도록 설정!!!
    : 코딩을 위한 편집 tool  : 메모장, 에디터플러스, 이클립스, 인텔리제이...


  Java의 특징
    1) 운영체제에 독립적이다. - Write Once,Run Anywhere! => JDK안의 JVM
        JVM(Java Virtual Machine)이 운영체제에 독립적일수 있도록 해준다.
    
    2) 객체지향언어이다.(Object Oriented Programming)
         "OOP is A, P , I , E"
          A - Abstraction (추상화)
          P - Polymorphsim(다형성)
          I - Inheritance(상속)
          E - Encapulattion(캡슐화-은닉)
          
    3) 상대적으로 배우기 쉽다. - C에 비해서...
    
    4) 다양한 API제공한다.(Application Programming Interface)
    
    5) 가비지 콜렉터(Garbage Collector : GC)
        사용하지 않는 메모리 공간을 자동으로 제거, 개발자가 직접 메모리 관리 안함.
         
         
  Java 기본문법
    1)  클래스이름 첫글자 : 대문자시작
        메소드이름, 변수이름  첫글자 : 소문자 시작
         메소드는 항상 () 괄호가 붙는다.
        * 단어와 단어가 조합될때 낙타표기법(Camel)사용한다. 

        단, 상수는 모두 대문자로 작성한다. : 단어와 단어가 조합될때 _ (언더바)를 사용한다.


       * 변수 : 데이터를 저장하는 공간
                 한가지 타입, 한가지 값만 저장가능하다. 값변경 가능하다.

  변수선언방법
      데이터타입 변수이름;
      데이터타입 변수이름 = 값 ;


   * 데이터타입의 종류(자료형)
     1) primitive type = 기본형(8가지)
            정수형 : 크기에 따라  byte(1byte) -> short(2byte) -> int(4byte) -> long(8byte)
            실수형  : float(4byte) -> double(8byte)  : 기본형은 double
            문자형  : char(2byte)  -한글자 만 저장가능 ex) 'A'
            논리형  : boolean - true, false 값만 가능한다.
 
     2) Object  type  = reference type = 참조타입
          만약 class가 존재한다면 그 class의 이름이 타입이 될 수 있다!!!

         ex)
              class Hello{   }
              class Cat{  }

             변수선언
               int i; //정수형선언
               Hello h; // Hello 형 선언
               Cat t ;// Cat 타입 변수 선언

          중요: String 은 Object 타입이다. !!!
                  String은 문자열 저장!!

                class String {  } 있다.!!!


 * 연산자!!!
       1) 산술연산자 : + ,- , *, / , %
       2) 대입연산자 : = , +=, -=, *=, /=
       3) 관계연산자 : == , !=, > , < , >= ,<=
       4) 논리연산자 : && , ||
       5) 증감연산자 : ++  , --
       6) 비트연산자 : ^ , | , & 
       7) 삼항연산자 :  조건식 ? 참인경우 : 거짓인경우 

---------------------------------------------------
 - 제어문
   1) 조건문
       - if문
       - switch문

   2) 반복문
      - for문
      - while문
      - do while문

      * 반복문안에서 반복문을 제어하는 키워드 2가지
            - break
            - continue
------------------------------------------------------
  if문구조

    if(조건식){ //만약 조건식이 true라면 블럭을 실행해라..
        실행문장;
    }
  ------------------------------------------
   if(조건식){
      //실행문장;
  }else{
      //실행문장;
  }

--------------------------------------------
if(조건식){
  실행문장;
}else if(조건식){
  실행문장;
}else if(조건식){
   실행문장;
}...
-----------------------------------
if(조건식){
   실행문장;
}else if(조건식){
   실행문장;
}else if(조건식){
   실행문장;
}else{
  실행문장;
}

-----------------------------------------
* 난수발생
   double nansu = Math.random() ;//  0.0 ~~~ 0.9999

 ex) 1~5사이의 정수를 난수발생
     (Math.random() * 경우의수) + 최솟값;
    
 * 난수발생 전용 클래스
     import   java.util.Ramdom ;

      Ramdom r =new Ramdom();
    
--------------------------------------------------------
  switch문 구조
    : 조건을 비교할때 조건의 범위를 비교할 수는 없고 값이 정확하게 일치하는 경우에 비교 가능하다.
      break키워드를 적절하게 사용해서 여러 실행문장을 한번에 실행 하게 할 수 있다. 

    switch(비교대상){// 비교대상에 표현식이 올 수 있고 그 값이 case에 비교된다.(byte, short, char, int ,  java 1.7에서 String 지원)
        case 값 : 실행문장 ; break;
        case 값 : 실행문장 ; break;
        case 값 : 실행문장 ; break;
        ....
        default : 실행문장;
  }

----------------------------------------------------------
 for문 구조
    : 조건식이 true일 동안 실행문장을 반복한다.

  for( 초기화  ; 조건식  ; 증감식  ){
      실행문장;
  }



* while문 구조
   초기화;
   while( 조건식 ){
      실행문장;
      증감식;
  }

  * do while문  : 무조건 반복문 한번은 실행한다.
    초기화;
    do{
      실행문장;
       증감식;
   }while( 조건식  );


 * 무한루프
   for( ; ; ){
      
    }


   while(true){

   }

   do{

  }while(true);

-------------------------------------------
   초기화;
   while(조건식){
     초기화;
      while(조건식){
          문장;
          증감식;
     }
     증감식;
  }

----------------------------------------------
초기화;
  do{
     초기화;
     do{
       문장;
       증감식;
     }while(조건식);

    증감식;
 }while(조건식);



























