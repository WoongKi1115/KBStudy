-자바 시작하기
  : 자바는 SUN에서 시작
  : 1991년 오크라는 이름으로 전자 제품에 들어가는 SW로시작!
  : 1995 년에 자바라는 이름으로 재 탄생!!
  : 2011년에 오라클에서 인수!!!
     자바관련 자격증이름 - SCJP ---> OCJP

  : oracle.com 
  
  : Java개발 분야에 따른 종류
     1) JavaSE (Java Standard Edition) 
           - 자바언어의 핵심기능 제공
           
     2) Java EE(Java Enterprise Edition) 
           - JavaSE 플랫폼 위에서 구축하며 기업용 애플리케이션 제작에 필요한 도구, 라이브러리제공
           
     3) Java ME Embedded
           - 핸드폰등 모바일 기기나 다른 임베디드 장치에 사용 
           
  
 -  환경 세팅
    1) JDK설치- Java Development Kit : 작성한 코드를 컴파일하고 실행해주는 역할!!!

      *  Java 소스코드 자체는 오픈소스. 오픈소스인 Java 소스코드를 빌드하여 사용하는 것에는 거의 제약이 없지만
         Oracle에서 제공하는 설치버전의 JDK는 회사에서는 사용할 수 없다. - 라이센스문제
        그래서, 무료로 제공하는 다양한 버전의 JDK가 있다.

      * JDK종류
          1) Oracle JDK
               Oracle에서 제공하는 JDK. 구독을 통해 유료 라이센스를 구매할 수 있다. 

         2) OpenJDK

         3) Azul Zulu

      * Java Version
          20
          17 - LTS
          11 - 선택 설치!!! (LTS - Long Term Support)
           9
           8 - LTS
           7 - LTS
           6 - LTS
           5
         
        
      * Java Version별 추가 spec
         1) Java 5.0
             : 제네릭, 오토박싱, 언박싱, enum , annotation , 개선된 for, static import
             
         2) Java 8.0
             : Interface의 static, default
             : 함수형프로그래밍,  Lambda
             : Stream활용
             : 날짜와 시간관리 강화 - 개선된 Date API
             : 병렬데이터 처리성능
             
         3) Java 9.0
             : Immutable List 가능 
             : Private Method in Interface :  interface 안에 private메소드 
             : The var for local variables  : var map = new HashMa<String , Student>();
             : Optional class에 새로운 메소드 추가(ifPresent, ifPresentOrElse)
             : REPL(Read Eval Print Loop)  - jshell
                jshell은 컴파일, 수정, 실행을 IDE를 사용하지 않고 쉽게 자바 코드의 개발과 테스트 할수 있게함.
                
             : Java 9의 가장 큰변화중 하나는 모듈시스템(Java Platform Module System)!
                JDK 모듈을 사용할수 있고 자신의 모듈을 만들수 있음
                java에서 패키지단위의 캡슐화가능하고 module간의 의존관계를 정의하여 최적화된 
                application배포를 가능하게 한다.
                 

     2) 코딩을 위한 tool 필요
          : NotePad
          : EditPlus
          : Visual Studio Code
          : Aptana Studio

           * IDE(Integrated Development Environment) - 통합개발환경 
              : 이클립스 -  eclipse.org 
              : 인텔리제이 - jetbrains.com


          3) path 설정
		window - C:Program Files|Java|jdk-11.0.13|bin 등록한다.
		이유 : bin안에 있는 실행파일을 위치에 상관없이 
			언제든지 어디서든 사용할 수 있도록!!!

————————————————————————

 * Java의 변천사
    : 응용프로그램
       - 브라우저에서 동작할 수 있는 실행할 수 있는 applet 제공!! (Applet —> swing과 비슷)
       - 완벽한 자바소스로 만들어서 ~.html 문서안에 <applet class="클래스이름"  /> 

       - 브라우져에서 동작한다 하더라도 완벽한 자바소스이기때문에 프로그램을 만드는데 불편함.
           : 이 시기에 asp, php언어가 인기!!!


   *Servlet 언어
     : java로 만들어 웹브라우져에서 동작하는 언어
     : java문서안에 html, css, javaScript 모두 함께 사용가능
     : Front에 대한 부분은 html, css, js로 작성하고 Business Logic은 순수 자바로 작성할수 있다.
     : 결국, 확장자는 ~.java이기 때문에 컴파일하고 실행 해야하는 번거로움과 자바를 잘 모르면 
       만들기가 쉽지 않다. 디자이너와 개발자 사이 소통의 어러움!!!
     : 코딩이 java중심코드!!!!

  * JSP
    : ~.jsp문서안에 html, css, javaScript를 코딩
    : 코딩이 html중심으로 코딩하고 자바코드가 필요할때 <% java코드 작성 %> 사용해서 작성한다.
    : asp, php와 거의 유사한 언어를 제공!!!


   * 결론
      JSP로 웹페이지를 만들면 코딩은 쉬워도  View 와 Business Logic이 한 페이지에 섞여 있어 
      소스는 복잡하고 유지보수, 확장성이 떨어진다!!
      : 어떻게 잘 만들어야 유지보수, 확장성이 좋을까? 대한 고민이 생겼다!!!! 
         - Refactoring을한다!!
         - 디자인패턴 GoF 23가지, SOLID 객체지향설계원칙

         - MVC구조 개발 필요성!!
            Model : java
            View : html, css, javaScript, jsp
            Controller : Servlet   - View와 Model사이 중간에서 Front와 Back을 연결해주는 역할 

   








